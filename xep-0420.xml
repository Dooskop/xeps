<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY content "&lt;content/&gt;">
  <!ENTITY envelope "&lt;envelope/&gt;">
  <!ENTITY payload "&lt;payload/&gt;">
  <!ENTITY time "&lt;time/&gt;">
  <!ENTITY rpad "&lt;rpad/&gt;">
  <!ENTITY to "&lt;to/&gt;">
  <!ENTITY from "&lt;from/&gt;">
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Stanza Content Encryption</title>
  <abstract>The Stanza Content Encryption (SCE) protocol is intended as a way to allow clients to securely exchange arbitrary extension elements using different end-to-end encryption schemes.</abstract>
  &LEGALNOTICE;
  <number>0420</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0001</spec>
    <spec>Etc.</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>SCE</shortname>
  &paulschaub;
  <revision>
    <version>0.3.0</version>
    <date>2020-07-03</date>
    <initials>ps</initials>
    <remark>
      <p>Allow origin-id elements, disallow stanza-id and extended stanza addressing elements inside the payload element</p>
      <p>Clarify wording on stanza processed elements and improve XEP formatting</p>
      <p>Remove limitation of random padding content to base64 characters alone</p>
      <p>Chat messages MUST contain message processing store hint</p>
      <p>Credit where credit is due</p>
    </remark>
  </revision>
  <revision>
    <version>0.2.0</version>
    <date>2019-10-04</date>
    <initials>ps</initials>
    <remark>
      <p>Specify IQ encryption</p>
      <p>Add examples and addenda</p>
    </remark>
  </revision>
  <revision>
    <version>0.1.0</version>
    <date>2019-07-30</date>
    <initials>XEP Editor (jsc)</initials>
    <remark>Accepted by vote of Council on 2019-06-26.</remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2019-06-03</date>
    <initials>ps</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <p>There is a number of different end-to-end encryption mechanisms that can be used to secure user communication against unauthorized access from malicious third parties. Popular examples for this are &xep0384; and &xep0373;.</p>

  <p>While the latter allows for encryption of arbitrary extension elements, protocols such as &xep0384; are limited to only encrypt the body of a message. This approach is not very flexible and prevents the combined usage with XMPP extension protocols such as &xep0385; or &xep0308; as their extension elements cannot be included in the encrypted part of the message, therefore leaking information about the message content.</p>

  <p>This extension protocol proposes a solution to aforementioned issues by generalizing the OpenPGP Content Elements (eg. <link url="https://xmpp.org/extensions/xep-0373.html#example-2">&lt;signcrypt&gt;</link>) introduced by &xep0373; for the use with other encryption protocols.</p>

</section1>

<section1 topic='Requirements' anchor='reqs'>
  <p>This proposal widens the scope of the security guarantees given by the used encryption mechanism from just the body of the message to all contents of the &content; element. It is intended to serve as a "one size fits all" solution for extension element encryption in XMPP.</p>

  <p>In order to achieve its goal, Stanza Content Encryption does the following:</p>
  <ul>
    <li>Define elements that hold sensitive information</li>
    <li>Speficy rules about how extension elements are encrypted and embedded in the message</li>
    <li>Specify rules about which elements are allowed inside and outside the protected domain</li>
  </ul>
</section1>

<section1 topic='Glossary' anchor='glossary'>
  <dl>
    <di><dt>Envelope Element &envelope;</dt><dd>An XMPP extension element which is used to hold the encrypted &content; element.</dd></di>
    <di><dt>Content Element &content;</dt><dd>An element which is used to contain all of those extension elements that need to be encrypted.
            The XML representation of this element is encrypted and then embedded into the &envelope; element.</dd></di>
  </dl>
</section1>

<section1 topic='Affix Elements' anchor='affix_elements'>
  <p>In order to prevent certain attacks, different affix elements MAY be added into the &content; element.</p>

  <table caption='Overview about different crypto property elements'>
    <tr>
      <th>Element</th>
      <th>Description</th>
      <th>Usage</th>
      <th>Verification</th>
    </tr>
    <tr>
      <td>&rpad;</td>
      <td>Random-length random-content padding</td>
      <td>Prevent known ciphertext and message length correlation attacks. The content of this element is a randomly generated sequence of random length between 0 and 200 characters. TODO: sane boundaries?</td>
      <td>None. This element is only used to change the length of the ciphertext and doesn't need to be verified</td>
    </tr>
    <tr>
      <td>&time;</td>
      <td>Timestamp</td>
      <td>Prevent replay attacks using old messages. This element MUST have one attribute 'stamp', whose value is a timestamp following the format described in &xep0082;. The timestamp represents the time at which the message was encrypted by the sender.</td>
      <td>Receiving clients MUST check whether the difference between the timestamp and the sending time derived from the stanza itself lays within a reasonable margin. The client SHOULD use the content of the timestamp element when displaying the send date of the message</td>
    </tr>
    <tr>
      <td>&to;</td>
      <td>Recipient of the message</td>
      <td>Prevent spoofing of the recipient. This element MUST have one attribute 'jid', whose value is the JID of the intended recipient.</td>
      <td>Receiving clients MUST check, if the JID matches the to attribute of the enclosing stanza and otherwise alert the user/reject the message</td>
    </tr>
    <tr>
      <td>&from;</td>
      <td>Sender of the message</td>
      <td>Prevent spoofing of the sender. This element MUST have one attribute 'jid', whose value is the JID of the sender of the message.</td>
      <td>Receiving clients MUST check, if the value matches the from attribute of the enclosing stanza and otherwise alert the user/reject the message</td>
    </tr>
  </table>

  <example caption='Examples of Affix Elements'><![CDATA[
<time stamp='2004-01-25T06:05:00+01:00'/>
<to jid='missioncontrol@houston.nasa.gov'/>
<from jid='opportunity@mars.planet'/>
<rpad>C1DHN9HK-9A25tSmwK4hU!Jji9%GKYK^syIlHJT9TnI4</rpad>
]]>
  </example>

  <p>Encryption protocols that make use of Stanza Content Encryption MUST define their own profiles that describe mandatory behaviour of which of these elements are used. They MAY also define and add their own specific affix elements.</p>

</section1>

<section1 topic='Motivation' anchor='motivation'>

  <p>Some end-to-end encryption protocols like &xep0384; are historically limited to encryption of the message body only. This approach excludes other extension elements from the protected domain of the payload element, exposing them to potential attackers.</p>

  <example caption='An imperfectly encrypted message which leaks dangerous information about the conversation through the plaintext OOB extension element'><![CDATA[
<message from='narrator@jabber.org'
         to='viewer@jabber.org'>
  <encrypted xmlns='eu.siacs.conversations.axolotl'>
    <header sid='27183'>
      ...
    </header>
    <payload>
      SSBnb3QgaW4gZXZlcnlvbmUncyBob3N0aWxlIGxpdHRsZSBmYWNlLiBZZXMsIHRoZXNlIGFyZSBi
      cnVpc2VzIGZyb20gZmlnaHRpbmcuIFllcywgSSdtIGNvbWZvcnRhYmxlIHdpdGggdGhhdC4gSSBh
      bSBlbmxpZ2h0ZW5lZC4=
    </payload>
  </encrypted>
  <x xmlns='jabber:x:oob'>
    <url>https://en.wikipedia.org/wiki/Fight_Club#Plot</url>
  </x>
</message>
]]>
  </example>
  <p>The example above obviously leaks information about the communication through the unencrypted OOB extension element.</p>

  <p>Most end-to-end encryption mechanisms are also focussed solely on message content encryption and do not tackle &lt;iq/&gt; requests/replies at all. Stanza Content Encryption can be applied to those as well.</p>

  <example caption='Unencrypted IQ request'><![CDATA[
<iq from='doctor@shakespeare.lit/pda'
    id='get-data-1'
    to='ladymacbeth@shakespeare.lit/castle'
    type='get'>
  <data xmlns='urn:xmpp:bob'
        cid='sha1+8f35fef110ffc5df08d579a50083ff9308fb6242@bob.xmpp.org'/>
</iq>
]]>
  </example>

  <example caption='Likewise unencrypted reply'><![CDATA[
<iq from='ladymacbeth@shakespeare.lit/castle'
    id='get-data-1'
    to='doctor@shakespeare.lit/pda'
    type='result'>
  <data xmlns='urn:xmpp:bob'
        cid='sha1+8f35fef110ffc5df08d579a50083ff9308fb6242@bob.xmpp.org'
        max-age='86400'
        type='image/png'>
    iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAABGdBTUEAALGP
    C/xhBQAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB9YGARc5KB0XV+IA
    AAAddEVYdENvbW1lbnQAQ3JlYXRlZCB3aXRoIFRoZSBHSU1Q72QlbgAAAF1J
    REFUGNO9zL0NglAAxPEfdLTs4BZM4DIO4C7OwQg2JoQ9LE1exdlYvBBeZ7jq
    ch9//q1uH4TLzw4d6+ErXMMcXuHWxId3KOETnnXXV6MJpcq2MLaI97CER3N0
    vr4MkhoXe0rZigAAAABJRU5ErkJggg==
  </data>
</iq>
]]>
  </example>

</section1>

<section1 topic='Use Cases' anchor='usecases'>
  <section2 topic='Use in &lt;message/&gt; stanzas' anchor='use-case-message'>
    <p>The main use case of Stanza Content Encryption is the use of end-to-end encryption protocols in combination with extension protocols that store sensitive information in other places than the message body.</p>

    <p>This applies to many extension elements that add additional information to &lt;message/&gt; stanzas, such as those of &xep0066;.</p>

    <example caption='Content element containing the messages body and the OBB element.'><![CDATA[
<content xmlns='urn:xmpp:sce:0'>
  <payload>
    <body xmlns='jabber:client'>[...]</body>
    <x xmlns='jabber:x:oob'>
      <url>https://en.wikipedia.org/wiki/Fight_Club#Plot</url>
    </x>
  </payload>
</content>]]>
    </example>

    <example caption='Finished message stanza containing the &lt;content/&gt; element from the previous example encrypted using a hypothetical encryption protocol and SCE.'><![CDATA[
<message from='narrator@jabber.org'
         to='viewer@jabber.org'>
  <encrypted xmlns='urn:xmpp:encryption:stub:sce:0'>
    <payload>
      PGNvbnRlbnQgeG1sbnM9J3Vybjp4bXBwOnNjZTowJz48cGF5bG9hZD48Ym9keSB4bWxucz0namFi
      YmVyOmNsaWVudCc+SSBnb3QgaW4gZXZlcnlvbmUncyBob3N0aWxlIGxpdHRsZSBmYWNlLiBZZXMs
      IHRoZXNlIGFyZSBicnVpc2VzIGZyb20gZmlnaHRpbmcuIFllcywgSSdtIGNvbWZvcnRhYmxlIHdp
      dGggdGhhdC4gSSBhbSBlbmxpZ2h0ZW5lZC48L2JvZHk+PHggeG1sbnM9J2phYmJlcjp4Om9vYic+
      PHVybD5odHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaWdodF9DbHViI1Bsb3Q8L3VybD48
      L3g+PC9wYXlsb2FkPjwvY29udGVudD4=
    </payload>
  </encrypted>
</message>]]>
    </example>
  </section2>

  <section2 topic='Use in &lt;iq/&gt; stanzas' anchor='use-case-iq'>
    <p>Stanza Content Encryption thrives not only to allow for rich content encryption in &lt;message/&gt; stanzas, but is also applicable to &lt;iq/&gt; queries. A resource might want to query sensitive information from another resource capable of Stanza Content Encryption.</p>

    <example caption='Sender prepares a &content; element containing the query subject.'><![CDATA[
<content xmlns='urn:xmpp:sce:0'>
  <payload>
    <data xmlns='urn:xmpp:bob'
        cid='sha1+8f35fef110ffc5df08d579a50083ff9308fb6242@bob.xmpp.org'/>
  </payload>
  <from jid='doctor@shakespeare.lit/pda'/>
  <to jid='ladymacbeth@shakespear.lit/castle'/>
</content>
]]>
    </example>

    <example caption='The sender then encrypts the &content; element for the recipient and sends the &lt;iq/&gt; containing the result of the encryption.'><![CDATA[
<iq from='doctor@shakespeare.lit/pda'
    id='get-data-1'
    to='ladymacbeth@shakespeare.lit/castle'
    type='get'>
  <encrypted xmlns='urn:xmpp:encryption:stub:sce:0'>
    <payload>
      V2FpdCwgd2hhdD8gQXJlIHlvdSBzZXJpb3VzPyBEaWQgeW91IHJlYWxseSBqdXN0IGdyYWIgeW91
      ciBmYXZvdXJpdGUgYmFzZTY0IGRlY29kZXIganVzdCB0byBjaGVjayB0aGlzIGRvY3VtZW50IGZv
      ciBoaWRkZW4gbWVzc2FnZXM/IFdoYXQgYXJlIHlvdSBzb21lIGtpbmQgb2YgbmVyZD8gU29tZSBn
      ZWVrIHdpdGggYSBiaW5hcnkgd3Jpc3Qgd2F0Y2g/
    </payload>
  </encrypted>
</iq>]]>
    </example>

    <example caption='The recipient prepares the reply to the request by assembling the &content; element.'><![CDATA[
<content xmlns='urn:xmpp:sce:0'>
  <payload>
    <data xmlns='urn:xmpp:bob'
        cid='sha1+8f35fef110ffc5df08d579a50083ff9308fb6242@bob.xmpp.org'
        max-age='86400'
        type='image/png'>
    iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAMAAAC67D+PAAAAclBMVEUAAADYZArfaA9GIAoBAAGN
    QA3MXgniaAiEOgZMIATDXRXZZhHUZBHIXhDrbQ6sUQ7OYA2TRAubRwqMQQq7VQlKHgMAAAK5WRfJ
    YBOORBFoMBCwUQ/ycA6FPgvbZQpeKglNJQmrTQeOPgQyFwR6MwACAABRPE/oAAAAW0lEQVQI1xXI
    Rw6EMBTAUP8kJKENnaF37n9FQPLCekAgzklhgCwfrlNHEXhrvCsxaU/SwLGAFuIWZFpBERtKm9Xf
    JqH+vVWh4POqgHrsAtht095b+geYRSl57QHSPgP3+CwvAAAAAABJRU5ErkJggg==
    </data>
  </payload>
  <from jid='ladymacbeth@shakespear.lit/castle'/>
  <to jid='doctor@shakespeare.lit/pda'/>
</content>]]>
    </example>

    <example caption='The &content; element is then encrypted and sent as a reply to the initiator of the request.'><![CDATA[
<iq from='ladymacbeth@shakespeare.lit/castle'
    id='get-data-1'
    to='doctor@shakespeare.lit/pda'
    type='result'>
  <encrypted xmlns='urn:xmpp:encryption:stub:sce:0'>
    <payload>
      PGNvbnRlbnQgeG1sbnM9J3Vybjp4bXBwOnNjZTowJz4KICA8cGF5bG9hZD4KICAgIDxkYXRhIHht
      bG5zPSd1cm46eG1wcDpib2InCiAgICAgICAgY2lkPSdzaGExKzhmMzVmZWYxMTBmZmM1ZGYwOGQ1
      NzlhNTAwODNmZjkzMDhmYjYyNDJAYm9iLnhtcHAub3JnJwogICAgICAgIG1heC1hZ2U9Jzg2NDAw
      JwogICAgICAgIHR5cGU9J2ltYWdlL3BuZyc+CiAgICBpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFB
      QW9BQUFBS0NBTUFBQUM2N0QrUEFBQUFjbEJNVkVVQUFBRFlaQXJmYUE5R0lBb0JBQUdOCiAgICBR
      QTNNWGduaWFBaUVPZ1pNSUFURFhSWFpaaEhVWkJISVhoRHJiUTZzVVE3T1lBMlRSQXViUndxTVFR
      cTdWUWxLSGdNQUFBSzVXUmZKCiAgICBZQk9PUkJGb01CQ3dVUS95Y0E2RlBndmJaUXBlS2dsTkpR
      bXJUUWVPUGdReUZ3UjZNd0FDQUFCUlBFL29BQUFBVzBsRVFWUUkxeFhJCiAgICBSdzZFTUJUQVVQ
      OGtKS0VObmFGMzduOUZRUExDZWtBZ3prbGhnQ3dmcmxOSEVYaHJ2Q3N4YVUvU3dMR0FGdUlXWkZw
      QkVSdEttOVhmCiAgICBKcUgrdlZXaDRQT3FnSHJzQXRodDA5NWIrZ2VZUlNsNTdRSFNQZ1AzK0N3
      dkFBQUFBQUJKUlU1RXJrSmdnZz09CiAgICA8L2RhdGE+CiAgPC9wYXlsb2FkPgogIDxmcm9tIGpp
      ZD0nbGFkeW1hY2JldGhAc2hha2VzcGVhci5saXQvY2FzdGxlJy8+CiAgPHRvIGppZD0nZG9jdG9y
      QHNoYWtlc3BlYXJlLmxpdC9wZGEnLz4KPC9jb250ZW50Pgo=
    </payload>
  </encrypted>
</iq>]]>
    </example>
  </section2>
</section1>

<section1 topic='Sending an encrypted stanza' anchor='sending'>

  <p>In order to send an encrypted message without leaking extension elements the sender prepares the message by placing the sensitive extension elements inside a &payload; element inside a &content; element.</p>
  <p>Depending on the encryption-specific SCE-profile, some affix elements are added as child elements of the &content; element.</p>
  <p>The &content; element is then serialized into XML and encrypted using the SCE-specific profile of the encryption mechanism in place. The result is appended to the message.</p>
  <p>Since the outer message element does not contain a &lt;body/&gt; element the sender appends an unencrypted &lt;store/&gt; hint as specified in &xep0334;.</p>
  <p>The message can then be sent to the recipient.</p>
</section1>

<section1 topic='Receiving an encrypted stanza' anchor='receiving'>
  <p>The recipient of the message decrypts the content of the &envelope; element to retrieve the &content; element. Depending on the affix profiles specified by the used encryption protocol, the affix elements are verified to prevent certain attacks from taking place.</p>
  <p>Next the extension elements of the &content; elements &payload; element are checked against the whitelist/blacklist and any disallowed elements are discarded.</p>
  <p>As a last step, the original unencrypted stanza is recreated by replacing the &envelope; element of the stanza with the contents of the &payload; element.</p>
</section1>

<section1 topic='Server-processed Elements' anchor='server-processed'>
  <p>There are certain extension elements which are required to be available to the server in order to do message routing and processing.
     Additionally there are some elements that MUST be filtered by the server.
     Allowing for those elements to be included in, and parsed from the encrypted payload would allow a malicious client to perform a number of attacks.</p>
  <p>Contrary to this, other elements are considered sensitive and MUST NOT be available in plaintext outside the &content; element.</p>
  <p>It is hard to come up with a complete list of exceptional elements at this point, as there is no practical implementation experience.</p>
  <p>Below is a non-exhaustive list of elements that are definitely blacklisted inside the &content; element and whitelisted as direct child elements of the message.</p>
  <table caption='Examples for exceptional elements that MUST NOT be included in, or read from the &content; element and MUST instead be sent traditionally as direct child elements of the stanza.'>
    <tr>
      <th>Element</th>
      <th>Reason</th>
    </tr>
    <tr>
      <td>Elements of &xep0334;</td>
      <td>Message Processing Hints are addressed to the server and MUST therefore be accessible in plaintext. A receiving client MUST ignore any message processing hints encountered inside the encrypted &content; element</td>
    </tr>
    <tr>
      <td>Stanza-ID elements of &xep0359;</td>
      <td>Sending clients MUST NOT include Stanza-ID elements inside the &content; element, as this would prevent the server from filtering it.
          A client MUST ignore Stanza-ID elements encountered inside &content; element</td>
    </tr>
    <tr>
      <td>Elements of &xep0033;</td>
      <td>The server MUST be able to access the &lt;addresses/&gt; and &lt;address/&gt; elements in order to do message routing, so they MUST NOT be encrypted.</td>
    </tr>
    <tr>
      <td>TODO: Other elements?</td>
      <td></td>
    </tr>
  </table>

</section1>

<section1 topic='Business Rules' anchor='rules'>
  <p>Unencrypted &content; elements are NOT ALLOWED as child elements of the stanza and MUST be dropped.</p>
  <p>Elements in the &content; elements &payload; element MUST be identified using an element name and namespace.
     Notably the &lt;body/&gt; element MUST contain a valid namespace (i.e. "jabber:client").</p>
  <p>The recipient must verify that the decrypted &content; element contains valid XML before processing it any further. Invalid XML must be rejected.</p>
  <p>After verifying the integrity of the &content; element, the recipient needs to make sure that no server-processed elements are found within the payload.
     Any forbidden elements MUST be dropped before the message is processed any further.</p>
  <p>Furthermore the receiving client MUST ignore any extension elements considered as sensitive which are found outside of the &content; element,
     especially as direct unencrypted child elements of the enclosing stanza.</p>
  <p>Since a chat message encrypted with SCE MUST NOT contain a &lt;body/&gt; element, it is not eligible for MAM message storage (&xep0313;).
     Therefore sending entities MUST append an unencrypted &xep0334; &lt;store/&gt; hint as a direct child element to the message.</p>
</section1>

<section1 topic='Implementation Notes' anchor='impl'>
  <p>As a first, naïve approach a recipient of a message containing an &envelope; element could simply reinject the reassambled unencrypted stanza into the XML stream.
     This might introduce some security issues.
     Most notably, depending on the clients implementation it may become ambiguous which elements were received end-to-end encrypted and which were received unencrypted.</p>
  <p>Implementations should rather handle encrypted elements explicitly.</p>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>For the sake of simplicity, the examples in this document are not encrypted. A real-world implementation MUST make use of real cryptographic protocols.</p>
  <section2 topic='Encryption Profiles' anchor='security_profiles'>
    <p>This specification presents a set of affix elements which can be used to counter certain attacks. However it does not dictate any behaviour regarding what elements MUST be used/verified or when.</p>
    <p>Different cryptographic protocols come with different possible attack scenarios which must be taken into consideration, so it is left up to those cryptographic protocols to define profiles that describe the use of affix elements.</p>
  </section2>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>TODO: Maybe the Registrar should handle a blacklist of elements that are allowed as child elements of the &content; element?</p>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <p>TODO.</p>
</section1>

<section1 topic='Acknowledgements' anchor='acknowledgements'>
  <p>Big thanks to the authors of &xep0373; (Florian Schmaus, Dominik Schürmann and Vincent Breitmoser) which heavily inspired the idea of this protocol.</p>
  <p>Also thanks to Marvin Wißfeld, Tim Henkes, Daniel Gultsch, Melvin Keskin and Andreas Straub for their feedback.</p>
</section1>
</xep>
